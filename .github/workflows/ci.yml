# Nom du workflow affiché dans l'interface GitHub Actions
name: CI

# Configuration des déclencheurs
on:
  push:
    branches: [ main ]  # Le workflow se déclenche uniquement sur les push vers la branche main

jobs:
  # Job principal pour les tests
  test:
    # Utilise la dernière version d'Ubuntu comme environnement d'exécution
    runs-on: ubuntu-latest
    # Lie ce job à l'environnement "cats_and_dogs" pour accéder aux secrets
    environment: cats_and_dogs

    # Définition des services (conteneurs Docker) à lancer avec le job
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    # Étape 1 : Récupération du code source
    - uses: actions/checkout@v4  # Action officielle pour cloner le repository
    
    # Étape 2 : Configuration de l'environnement Python
    - name: Set up Python
      uses: actions/setup-python@v4  # Action officielle pour installer Python
      with:
        python-version: 3.11  # Version spécifique de Python à utiliser
    
    # Étape 3 : Installation des dépendances
    - name: Install dependencies
      run: |
        # Installation des dépendances de base du projet
        pip install -r requirements/base.txt
        # Installation des dépendances pour les tests
        pip install pytest pytest-asyncio
    
    # Étape 5 : Démarrage de l'API et exécution des tests
    - name: Start API and test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: testuser
        DB_PASSWORD: testpassword
        DB_NAME: testdb
        API_TOKEN_TEST: ${{ secrets.API_TOKEN_TEST }}
      run: |
        python scripts/run_api.py &
        sleep 10
        pytest
